// Code generated by Kitex v0.3.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"github.com/bdyc-org/dousheng/kitex_gen/video"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FeedVideo":     kitex.NewMethodInfo(feedVideoHandler, newVideoServiceFeedVideoArgs, newVideoServiceFeedVideoResult, false),
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newVideoServicePublishActionArgs, newVideoServicePublishActionResult, false),
		"PublishList":   kitex.NewMethodInfo(publishListHandler, newVideoServicePublishListArgs, newVideoServicePublishListResult, false),
		"VideoFavorite": kitex.NewMethodInfo(videoFavoriteHandler, newVideoServiceVideoFavoriteArgs, newVideoServiceVideoFavoriteResult, false),
		"VideoComment":  kitex.NewMethodInfo(videoCommentHandler, newVideoServiceVideoCommentArgs, newVideoServiceVideoCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedVideoArgs)
	realResult := result.(*video.VideoServiceFeedVideoResult)
	success, err := handler.(video.VideoService).FeedVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedVideoArgs() interface{} {
	return video.NewVideoServiceFeedVideoArgs()
}

func newVideoServiceFeedVideoResult() interface{} {
	return video.NewVideoServiceFeedVideoResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishActionArgs)
	realResult := result.(*video.VideoServicePublishActionResult)
	success, err := handler.(video.VideoService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionArgs() interface{} {
	return video.NewVideoServicePublishActionArgs()
}

func newVideoServicePublishActionResult() interface{} {
	return video.NewVideoServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishListArgs)
	realResult := result.(*video.VideoServicePublishListResult)
	success, err := handler.(video.VideoService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishListArgs() interface{} {
	return video.NewVideoServicePublishListArgs()
}

func newVideoServicePublishListResult() interface{} {
	return video.NewVideoServicePublishListResult()
}

func videoFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoFavoriteArgs)
	realResult := result.(*video.VideoServiceVideoFavoriteResult)
	success, err := handler.(video.VideoService).VideoFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoFavoriteArgs() interface{} {
	return video.NewVideoServiceVideoFavoriteArgs()
}

func newVideoServiceVideoFavoriteResult() interface{} {
	return video.NewVideoServiceVideoFavoriteResult()
}

func videoCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoCommentArgs)
	realResult := result.(*video.VideoServiceVideoCommentResult)
	success, err := handler.(video.VideoService).VideoComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoCommentArgs() interface{} {
	return video.NewVideoServiceVideoCommentArgs()
}

func newVideoServiceVideoCommentResult() interface{} {
	return video.NewVideoServiceVideoCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FeedVideo(ctx context.Context, req *video.DouyinFeedRequest) (r *video.DouyinFeedResponse, err error) {
	var _args video.VideoServiceFeedVideoArgs
	_args.Req = req
	var _result video.VideoServiceFeedVideoResult
	if err = p.c.Call(ctx, "FeedVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *video.DouyinPublishActionRequest) (r *video.DouyinPublishActionResponse, err error) {
	var _args video.VideoServicePublishActionArgs
	_args.Req = req
	var _result video.VideoServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *video.DouyinPublishListRequest) (r *video.DouyinPublishListResponse, err error) {
	var _args video.VideoServicePublishListArgs
	_args.Req = req
	var _result video.VideoServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFavorite(ctx context.Context, req *video.DouyinVideoFavoriteRequest) (r *video.DouyinVideoFavoriteResponse, err error) {
	var _args video.VideoServiceVideoFavoriteArgs
	_args.Req = req
	var _result video.VideoServiceVideoFavoriteResult
	if err = p.c.Call(ctx, "VideoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoComment(ctx context.Context, req *video.DouyinVideoCommentRequest) (r *video.DouyinVideoCommentResponse, err error) {
	var _args video.VideoServiceVideoCommentArgs
	_args.Req = req
	var _result video.VideoServiceVideoCommentResult
	if err = p.c.Call(ctx, "VideoComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
