// Code generated by Kitex v0.3.1. DO NOT EDIT.

package favoriteservice

import (
	"context"
	"github.com/bdyc-org/dousheng/kitex_gen/favorite"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Favorite":      kitex.NewMethodInfo(favoriteHandler, newFavoriteServiceFavoriteArgs, newFavoriteServiceFavoriteResult, false),
		"FavoriteList":  kitex.NewMethodInfo(favoriteListHandler, newFavoriteServiceFavoriteListArgs, newFavoriteServiceFavoriteListResult, false),
		"FavoriteJudge": kitex.NewMethodInfo(favoriteJudgeHandler, newFavoriteServiceFavoriteJudgeArgs, newFavoriteServiceFavoriteJudgeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteResult)
	success, err := handler.(favorite.FavoriteService).Favorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteArgs()
}

func newFavoriteServiceFavoriteResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteListArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteListResult)
	success, err := handler.(favorite.FavoriteService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteListArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteListArgs()
}

func newFavoriteServiceFavoriteListResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteListResult()
}

func favoriteJudgeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteJudgeArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteJudgeResult)
	success, err := handler.(favorite.FavoriteService).FavoriteJudge(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteJudgeArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteJudgeArgs()
}

func newFavoriteServiceFavoriteJudgeResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteJudgeResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Favorite(ctx context.Context, req *favorite.FavoriteOperationRequest) (r *favorite.FavoriteOperationResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteResult
	if err = p.c.Call(ctx, "Favorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *favorite.FavoriteListRequest) (r *favorite.FavoriteListResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteListArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteJudge(ctx context.Context, req *favorite.FavoriteJudgeRequest) (r *favorite.FavoriteJudgeResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteJudgeArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteJudgeResult
	if err = p.c.Call(ctx, "FavoriteJudge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
