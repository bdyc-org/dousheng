// Code generated by Kitex v0.3.1. DO NOT EDIT.

package relationservice

import (
	"context"
	"github.com/bdyc-org/dousheng/kitex_gen/relation"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "relationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Follow":        kitex.NewMethodInfo(followHandler, newRelationServiceFollowArgs, newRelationServiceFollowResult, false),
		"QueryFollow":   kitex.NewMethodInfo(queryFollowHandler, newRelationServiceQueryFollowArgs, newRelationServiceQueryFollowResult, false),
		"QueryFollower": kitex.NewMethodInfo(queryFollowerHandler, newRelationServiceQueryFollowerArgs, newRelationServiceQueryFollowerResult, false),
		"QueryUserList": kitex.NewMethodInfo(queryUserListHandler, newRelationServiceQueryUserListArgs, newRelationServiceQueryUserListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.1",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceFollowArgs)
	realResult := result.(*relation.RelationServiceFollowResult)
	success, err := handler.(relation.RelationService).Follow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFollowArgs() interface{} {
	return relation.NewRelationServiceFollowArgs()
}

func newRelationServiceFollowResult() interface{} {
	return relation.NewRelationServiceFollowResult()
}

func queryFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceQueryFollowArgs)
	realResult := result.(*relation.RelationServiceQueryFollowResult)
	success, err := handler.(relation.RelationService).QueryFollow(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceQueryFollowArgs() interface{} {
	return relation.NewRelationServiceQueryFollowArgs()
}

func newRelationServiceQueryFollowResult() interface{} {
	return relation.NewRelationServiceQueryFollowResult()
}

func queryFollowerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceQueryFollowerArgs)
	realResult := result.(*relation.RelationServiceQueryFollowerResult)
	success, err := handler.(relation.RelationService).QueryFollower(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceQueryFollowerArgs() interface{} {
	return relation.NewRelationServiceQueryFollowerArgs()
}

func newRelationServiceQueryFollowerResult() interface{} {
	return relation.NewRelationServiceQueryFollowerResult()
}

func queryUserListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceQueryUserListArgs)
	realResult := result.(*relation.RelationServiceQueryUserListResult)
	success, err := handler.(relation.RelationService).QueryUserList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceQueryUserListArgs() interface{} {
	return relation.NewRelationServiceQueryUserListArgs()
}

func newRelationServiceQueryUserListResult() interface{} {
	return relation.NewRelationServiceQueryUserListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, req *relation.FollowRequest) (r *relation.FollowResponse, err error) {
	var _args relation.RelationServiceFollowArgs
	_args.Req = req
	var _result relation.RelationServiceFollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFollow(ctx context.Context, req *relation.QueryFollowRequest) (r *relation.QueryFollowResponse, err error) {
	var _args relation.RelationServiceQueryFollowArgs
	_args.Req = req
	var _result relation.RelationServiceQueryFollowResult
	if err = p.c.Call(ctx, "QueryFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFollower(ctx context.Context, req *relation.QueryFollowerRequest) (r *relation.QueryFollowerResponse, err error) {
	var _args relation.RelationServiceQueryFollowerArgs
	_args.Req = req
	var _result relation.RelationServiceQueryFollowerResult
	if err = p.c.Call(ctx, "QueryFollower", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryUserList(ctx context.Context, req *relation.QueryUserListRequest) (r *relation.QueryUserListResponse, err error) {
	var _args relation.RelationServiceQueryUserListArgs
	_args.Req = req
	var _result relation.RelationServiceQueryUserListResult
	if err = p.c.Call(ctx, "QueryUserList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
